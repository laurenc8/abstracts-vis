{"ast":null,"code":"// import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Histogram = function Histogram(_ref) {\n  var data = _ref.data,\n      nBin = _ref.nBin;\n  d3.select('.vis-barchart > *').remove();\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom; // let svg = d3.select('.vis-barchart').append('svg')\n  //   .append(\"g\")\n  //   .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n  //   .call(d3.axisBottom(x));\n  // X axis: scale and draw:\n  // var x = d3.scaleLinear()\n  //   .domain([0, 200])\n  //   .range([30, width]);\n  //\n  //   // set the parameters for the histogram\n  //   var histogram = d3.histogram()\n  //     .value(data)   // I need to give the vector of value\n  //     .domain(x.domain())  // then the domain of the graphic\n  //     .thresholds(x.ticks(nBin)); // then the numbers of bins\n  //\n  //     // Y axis: initialization\n  //     var y = d3.scaleLinear()\n  //       .range([height, 0]);\n  //     var yAxis = svg.append(\"g\")\n  //        .attr(\"transform\", \"translate(30, 10)\")\n  //\n  //   // And apply this function to data to get the bins\n  //   var bins = histogram(data);\n  // svg.selectAll(\"rect\")\n  //   .data(bins)\n  //   .enter()\n  //   .append(\"rect\") // Add a new rect for each new elements\n  //     .attr(\"x\", 1)\n  //     .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n  //     .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n  //     .attr(\"height\", function(d) { return height - y(d.length); })\n  //     .style(\"stroke\", \"#dcd0ff\")\n  //     .style(\"stroke-width\", \"3px\")\n  //     .style(\"fill\", \"#dcd0ff\")\n};\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/Hist/histogram.js"],"names":["React","d3","Histogram","data","nBin","select","remove","margin","top","right","bottom","left","width","height"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAmB;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACnCH,EAAAA,EAAE,CAACI,MAAH,CAAU,mBAAV,EAA+BC,MAA/B;AAEA,MAAIC,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,KAAK,EAAE,EAAjB;AAAqBC,IAAAA,MAAM,EAAE,EAA7B;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAb;AAAA,MACEC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADrC;AAAA,MAEEI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFrC,CAHmC,CAOnC;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP,CA3CD;;AA6CA,eAAeR,SAAf","sourcesContent":["// import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nconst Histogram = ({ data, nBin}) => {\n  d3.select('.vis-barchart > *').remove();\n\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  // let svg = d3.select('.vis-barchart').append('svg')\n  //   .append(\"g\")\n  //   .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n  //   .call(d3.axisBottom(x));\n\n      // X axis: scale and draw:\n      // var x = d3.scaleLinear()\n      //   .domain([0, 200])\n      //   .range([30, width]);\n      //\n      //   // set the parameters for the histogram\n      //   var histogram = d3.histogram()\n      //     .value(data)   // I need to give the vector of value\n      //     .domain(x.domain())  // then the domain of the graphic\n      //     .thresholds(x.ticks(nBin)); // then the numbers of bins\n      //\n      //     // Y axis: initialization\n      //     var y = d3.scaleLinear()\n      //       .range([height, 0]);\n      //     var yAxis = svg.append(\"g\")\n      //        .attr(\"transform\", \"translate(30, 10)\")\n      //\n      //   // And apply this function to data to get the bins\n      //   var bins = histogram(data);\n\n        // svg.selectAll(\"rect\")\n        //   .data(bins)\n        //   .enter()\n        //   .append(\"rect\") // Add a new rect for each new elements\n        //     .attr(\"x\", 1)\n        //     .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n        //     .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n        //     .attr(\"height\", function(d) { return height - y(d.length); })\n        //     .style(\"stroke\", \"#dcd0ff\")\n        //     .style(\"stroke-width\", \"3px\")\n        //     .style(\"fill\", \"#dcd0ff\")\n}\n\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}