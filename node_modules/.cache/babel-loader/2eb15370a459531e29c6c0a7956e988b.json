{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Histogram = _ref => {\n  _s();\n\n  let {\n    dimensions\n  } = _ref;\n  const svgRef = React.useRef(null);\n  const {\n    width,\n    height,\n    margin\n  } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n  React.useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n\n    const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // get the data\n\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function (data) {\n      // X axis: scale and draw:\n      var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n      .range([0, width]);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n      var y = d3.scaleLinear().range([height, 0]);\n      var yAxis = svg.append(\"g\"); // A function that builds the graph for a specific value of bin\n\n      function update(nBin) {\n        // set the parameters for the histogram\n        var histogram = d3.histogram().value(function (d) {\n          return d.price;\n        }) // I need to give the vector of value\n        .domain(x.domain()) // then the domain of the graphic\n        .thresholds(x.ticks(nBin)); // then the numbers of bins\n        // And apply this function to data to get the bins\n\n        var bins = histogram(data); // Y axis: update now that we know the domain\n\n        y.domain([0, d3.max(bins, function (d) {\n          return d.length;\n        })]); // d3.hist has to be called before the Y axis obviously\n\n        yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n        var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n        u.enter().append(\"rect\") // Add a new rect for each new elements\n        .merge(u) // get the already existing elements as well\n        .transition() // and apply changes to all of them\n        .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n          return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n        }).attr(\"width\", function (d) {\n          return x(d.x1) - x(d.x0) - 1;\n        }).attr(\"height\", function (d) {\n          return height - y(d.length);\n        }).style(\"fill\", \"#69b3a2\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n        u.exit().remove();\n      } // Initialize with 20 bins\n\n\n      update(20); // Listen to the button -> update if user change it\n\n      d3.select(\"#nBin\").on(\"input\", function () {\n        update(+this.value);\n      });\n    }, [data]); // Redraw chart if data changes\n\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: svgWidth,\n      height: svgHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this);\n  });\n};\n\n_s(Histogram, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["React","d3","Histogram","dimensions","svgRef","useRef","width","height","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","svgEl","select","current","selectAll","remove","svg","append","attr","csv","data","x","scaleLinear","domain","range","call","axisBottom","y","yAxis","update","nBin","histogram","value","d","price","thresholds","ticks","bins","max","length","transition","duration","axisLeft","u","enter","merge","x0","x1","style","exit","on"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst Histogram = ({ dimensions }) => {\n  const svgRef = React.useRef(null);\n  const { width, height, margin } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n \n  React.useEffect(() => {\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // get the data\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n\n      // X axis: scale and draw:\n      var x = d3.scaleLinear()\n          .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n          .range([0, width]);\n      svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n      // Y axis: initialization\n      var y = d3.scaleLinear()\n          .range([height, 0]);\n      var yAxis = svg.append(\"g\")\n\n      // A function that builds the graph for a specific value of bin\n      function update(nBin) {\n\n        // set the parameters for the histogram\n        var histogram = d3.histogram()\n            .value(function(d) { return d.price; })   // I need to give the vector of value\n            .domain(x.domain())  // then the domain of the graphic\n            .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n        // And apply this function to data to get the bins\n        var bins = histogram(data);\n\n        // Y axis: update now that we know the domain\n        y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n        yAxis\n            .transition()\n            .duration(1000)\n            .call(d3.axisLeft(y));\n\n        // Join the rect with the bins data\n        var u = svg.selectAll(\"rect\")\n            .data(bins)\n\n        // Manage the existing bars and eventually the new ones:\n        u\n            .enter()\n            .append(\"rect\") // Add a new rect for each new elements\n            .merge(u) // get the already existing elements as well\n            .transition() // and apply changes to all of them\n            .duration(1000)\n              .attr(\"x\", 1)\n              .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n              .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n              .attr(\"height\", function(d) { return height - y(d.length); })\n              .style(\"fill\", \"#69b3a2\")\n\n\n        // If less bar in the new histogram, I delete the ones not in use anymore\n        u\n            .exit()\n            .remove()\n\n        }\n\n      // Initialize with 20 bins\n      update(20)\n\n      // Listen to the button -> update if user change it\n      d3.select(\"#nBin\").on(\"input\", function() {\n        update(+this.value);\n      });\n    }, [data]); // Redraw chart if data changes\n \n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />\n\n  })\n\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}