{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/naomikenyatta/abstracts-vis/src/components/Hist/histogram.js\";\n\nimport * as d3 from 'd3';\nimport { useD3 } from \"react-use-d3\";\nimport React from 'react';\n\nvar Histogram = function Histogram(_ref) {\n  var data = _ref.data,\n      nBin = _ref.nBin;\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    // X axis: scale and draw:\n    var x = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n      return +d.frequency;\n    }) + 10]).range([30, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + (height + 10) + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n    var y = d3.scaleLinear() //.domain([0, d3.max(data, function(d) { return d.length; })])\n    .range([height, 0]);\n    var yAxis = svg.append(\"g\").attr(\"transform\", \"translate(30, 10)\"); // A function that builds the graph for a specific value of bin\n\n    function update(nBin) {\n      console.log(nBin); // set the parameters for the histogram\n\n      var histogram = d3.histogram().value(function (d) {\n        return d.frequency;\n      }) // I need to give the vector of value\n      .domain(x.domain()) // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n      // And apply this function to data to get the bins\n\n      var bins = histogram(data); // Y axis: update now that we know the domain\n\n      y.domain([0, d3.max(bins, function (d) {\n        return d.length;\n      })]); // d3.hist has to be called before the Y axis obviously\n\n      yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n      var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n      u.enter().append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + x(d.x0) + \",\" + (y(d.length) + 10) + \")\";\n      }).attr(\"width\", function (d) {\n        return x(d.x1) - x(d.x0) - 4;\n      }).attr(\"height\", function (d) {\n        return height - y(d.length);\n      }).style(\"stroke\", \"#dcd0ff\").style(\"stroke-width\", \"3px\").style(\"fill\", \"#dcd0ff\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n      u.exit().remove();\n    }\n\n    update(nBin);\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    style: {\n      height: 350,\n      width: 500,\n      transform: \"rotate(90deg)\",\n      transformOrigin: 150\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/Hist/histogram.js"],"names":["d3","useD3","React","Histogram","data","nBin","margin","top","right","bottom","left","width","height","ref","svg","x","scaleLinear","domain","max","d","frequency","range","append","attr","call","axisBottom","y","yAxis","update","console","log","histogram","value","thresholds","ticks","bins","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","transform","transformOrigin"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport { useD3 } from \"react-use-d3\";\nimport React from 'react';\n\nconst Histogram = ({data, nBin}) => {\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n    const ref = useD3(\n    (svg) => {\n      // X axis: scale and draw:\n      var x = d3.scaleLinear()\n        .domain([0, d3.max(data, function(d) { return +d.frequency }) + 10])\n        .range([30, width]);\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n        .call(d3.axisBottom(x));\n\n      // Y axis: initialization\n      var y = d3.scaleLinear()\n        //.domain([0, d3.max(data, function(d) { return d.length; })])\n        .range([height, 0]);\n      var yAxis = svg.append(\"g\")\n         .attr(\"transform\", \"translate(30, 10)\")\n\n      // A function that builds the graph for a specific value of bin\n      function update(nBin) {\n        console.log(nBin);\n\n        // set the parameters for the histogram\n        var histogram = d3.histogram()\n          .value(function(d) { return d.frequency; })   // I need to give the vector of value\n          .domain(x.domain())  // then the domain of the graphic\n          .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n        // And apply this function to data to get the bins\n        var bins = histogram(data);\n\n        // Y axis: update now that we know the domain\n        y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n        yAxis\n          .transition()\n          .duration(1000)\n          .call(d3.axisLeft(y));\n\n        // Join the rect with the bins data\n        var u = svg.selectAll(\"rect\")\n          .data(bins)\n\n        // Manage the existing bars and eventually the new ones:\n        u\n          .enter()\n          .append(\"rect\") // Add a new rect for each new elements\n          .merge(u) // get the already existing elements as well\n          .transition() // and apply changes to all of them\n          .duration(1000)\n          .attr(\"x\", 1)\n          .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n          .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n          .attr(\"height\", function(d) { return height - y(d.length); })\n          .style(\"stroke\", \"#dcd0ff\")\n          .style(\"stroke-width\", \"3px\")\n          .style(\"fill\", \"#dcd0ff\")\n\n\n        // If less bar in the new histogram, I delete the ones not in use anymore\n        u\n         .exit()\n         .remove()\n\n     }\n\n     update(nBin)\n   });\n\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 350,\n        width: 500,\n        transform: \"rotate(90deg)\",\n        transformOrigin: 150\n      }}\n    />\n  );\n\n}\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}