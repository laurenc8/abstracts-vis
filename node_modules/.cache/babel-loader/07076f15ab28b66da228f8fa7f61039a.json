{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Histogram = _ref => {\n  _s();\n\n  let {\n    data,\n    dimensions\n  } = _ref;\n  const svgRef = React.useRef(null);\n  const {\n    width,\n    height,\n    margin\n  } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n  React.useEffect(() => {\n    const xScale = d3.scaleTime().domain(d3.extent(data[0].items, d => d.date)).range([0, width]);\n    const yScale = d3.scaleLinear().domain([d3.min(data[0].items, d => d.value) - 50, d3.max(data[0].items, d => d.value) + 50]).range([height, 0]); // Create root container where we will append all other chart elements\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n\n    const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // Add X grid lines with labels\n\n    const xAxis = d3.axisBottom(xScale).ticks(5).tickSize(-height + margin.bottom);\n    const xAxisGroup = svg.append(\"g\").attr(\"transform\", `translate(0, ${height - margin.bottom})`).call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Add Y grid lines with labels\n\n    const yAxis = d3.axisLeft(yScale).ticks(5).tickSize(-width).tickFormat(val => `${val}%`);\n    const yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Draw the lines\n\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.value));\n    svg.selectAll(\".line\").data(data).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", d => d.color).attr(\"stroke-width\", 3).attr(\"d\", d => line(d.items));\n  }, [data]); // Redraw chart if data changes\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: svgWidth,\n    height: svgHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Histogram, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = Histogram;\nexport default Histogram; // // set the dimensions and margins of the graph\n// var margin = {top: 10, right: 30, bottom: 30, left: 40},\n//     width = 460 - margin.left - margin.right,\n//     height = 400 - margin.top - margin.bottom;\n// // append the svg object to the body of the page\n// var svg = d3.select(\"#my_dataviz\")\n//   .append(\"svg\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//   .append(\"g\")\n//     .attr(\"transform\",\n//           \"translate(\" + margin.left + \",\" + margin.top + \")\");\n// // get the data\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n//   // X axis: scale and draw:\n//   var x = d3.scaleLinear()\n//       .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n//       .range([0, width]);\n//   svg.append(\"g\")\n//       .attr(\"transform\", \"translate(0,\" + height + \")\")\n//       .call(d3.axisBottom(x));\n//   // Y axis: initialization\n//   var y = d3.scaleLinear()\n//       .range([height, 0]);\n//   var yAxis = svg.append(\"g\")\n//   // A function that builds the graph for a specific value of bin\n//   function update(nBin) {\n//     // set the parameters for the histogram\n//     var histogram = d3.histogram()\n//         .value(function(d) { return d.price; })   // I need to give the vector of value\n//         .domain(x.domain())  // then the domain of the graphic\n//         .thresholds(x.ticks(nBin)); // then the numbers of bins\n//     // And apply this function to data to get the bins\n//     var bins = histogram(data);\n//     // Y axis: update now that we know the domain\n//     y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//     yAxis\n//         .transition()\n//         .duration(1000)\n//         .call(d3.axisLeft(y));\n//     // Join the rect with the bins data\n//     var u = svg.selectAll(\"rect\")\n//         .data(bins)\n//     // Manage the existing bars and eventually the new ones:\n//     u\n//         .enter()\n//         .append(\"rect\") // Add a new rect for each new elements\n//         .merge(u) // get the already existing elements as well\n//         .transition() // and apply changes to all of them\n//         .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"fill\", \"#69b3a2\")\n//     // If less bar in the new histogram, I delete the ones not in use anymore\n//     u\n//         .exit()\n//         .remove()\n//     }\n//   // Initialize with 20 bins\n//   update(20)\n//   // Listen to the button -> update if user change it\n//   d3.select(\"#nBin\").on(\"input\", function() {\n//     update(+this.value);\n//   });\n// });\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["React","d3","Histogram","data","dimensions","svgRef","useRef","width","height","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","xScale","scaleTime","domain","extent","items","d","date","range","yScale","scaleLinear","min","value","max","svgEl","select","current","selectAll","remove","svg","append","attr","xAxis","axisBottom","ticks","tickSize","xAxisGroup","call","yAxis","axisLeft","tickFormat","val","yAxisGroup","line","x","y","enter","color"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;;AAEA,MAAMC,SAAS,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAyB;AAC1C,QAAMC,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAa,IAAb,CAAf;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA4BL,UAAlC;AACA,QAAMM,QAAQ,GAAGH,KAAK,GAAGE,MAAM,CAACE,IAAf,GAAsBF,MAAM,CAACG,KAA9C;AACA,QAAMC,SAAS,GAAGL,MAAM,GAAGC,MAAM,CAACK,GAAhB,GAAsBL,MAAM,CAACM,MAA/C;AAEAf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,MAAM,GAAGhB,EAAE,CAACiB,SAAH,GACZC,MADY,CACLlB,EAAE,CAACmB,MAAH,CAAUjB,IAAI,CAAC,CAAD,CAAJ,CAAQkB,KAAlB,EAA0BC,CAAD,IAAOA,CAAC,CAACC,IAAlC,CADK,EAEZC,KAFY,CAEN,CAAC,CAAD,EAAIjB,KAAJ,CAFM,CAAf;AAGA,UAAMkB,MAAM,GAAGxB,EAAE,CAACyB,WAAH,GACZP,MADY,CACL,CACNlB,EAAE,CAAC0B,GAAH,CAAOxB,IAAI,CAAC,CAAD,CAAJ,CAAQkB,KAAf,EAAuBC,CAAD,IAAOA,CAAC,CAACM,KAA/B,IAAwC,EADlC,EAEN3B,EAAE,CAAC4B,GAAH,CAAO1B,IAAI,CAAC,CAAD,CAAJ,CAAQkB,KAAf,EAAuBC,CAAD,IAAOA,CAAC,CAACM,KAA/B,IAAwC,EAFlC,CADK,EAKZJ,KALY,CAKN,CAAChB,MAAD,EAAS,CAAT,CALM,CAAf,CAJoB,CAUpB;;AACA,UAAMsB,KAAK,GAAG7B,EAAE,CAAC8B,MAAH,CAAU1B,MAAM,CAAC2B,OAAjB,CAAd;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgB,GAAhB,EAAqBC,MAArB,GAZoB,CAYW;;AAC/B,UAAMC,GAAG,GAAGL,KAAK,CACdM,MADS,CACF,GADE,EAETC,IAFS,CAEJ,WAFI,EAEU,aAAY5B,MAAM,CAACE,IAAK,IAAGF,MAAM,CAACK,GAAI,GAFhD,CAAZ,CAboB,CAgBrB;;AACA,UAAMwB,KAAK,GAAGrC,EAAE,CAACsC,UAAH,CAActB,MAAd,EACXuB,KADW,CACL,CADK,EAEXC,QAFW,CAEF,CAACjC,MAAD,GAAUC,MAAM,CAACM,MAFf,CAAd;AAGA,UAAM2B,UAAU,GAAGP,GAAG,CAACC,MAAJ,CAAW,GAAX,EAChBC,IADgB,CACX,WADW,EACG,gBAAe7B,MAAM,GAAGC,MAAM,CAACM,MAAO,GADzC,EAEhB4B,IAFgB,CAEXL,KAFW,CAAnB;AAGAI,IAAAA,UAAU,CAACX,MAAX,CAAkB,SAAlB,EAA6BG,MAA7B;AACAQ,IAAAA,UAAU,CAACT,SAAX,CAAqB,MAArB,EAA6BI,IAA7B,CAAkC,QAAlC,EAA4C,0BAA5C;AACAK,IAAAA,UAAU,CAACT,SAAX,CAAqB,MAArB,EACGI,IADH,CACQ,SADR,EACmB,GADnB,EAEGA,IAFH,CAEQ,OAFR,EAEiB,OAFjB,EAGGA,IAHH,CAGQ,WAHR,EAGqB,SAHrB,EAzBqB,CA6BrB;;AACA,UAAMO,KAAK,GAAG3C,EAAE,CAAC4C,QAAH,CAAYpB,MAAZ,EACXe,KADW,CACL,CADK,EAEXC,QAFW,CAEF,CAAClC,KAFC,EAGXuC,UAHW,CAGCC,GAAD,IAAU,GAAEA,GAAI,GAHhB,CAAd;AAIA,UAAMC,UAAU,GAAGb,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBC,KAArB,CAAnB;AACAI,IAAAA,UAAU,CAACjB,MAAX,CAAkB,SAAlB,EAA6BG,MAA7B;AACAc,IAAAA,UAAU,CAACf,SAAX,CAAqB,MAArB,EAA6BI,IAA7B,CAAkC,QAAlC,EAA4C,0BAA5C;AACAW,IAAAA,UAAU,CAACf,SAAX,CAAqB,MAArB,EACGI,IADH,CACQ,SADR,EACmB,GADnB,EAEGA,IAFH,CAEQ,OAFR,EAEiB,OAFjB,EAGGA,IAHH,CAGQ,WAHR,EAGqB,SAHrB,EArCqB,CAyCpB;;AACA,UAAMY,IAAI,GAAGhD,EAAE,CAACgD,IAAH,GACVC,CADU,CACP5B,CAAD,IAAOL,MAAM,CAACK,CAAC,CAACC,IAAH,CADL,EAEV4B,CAFU,CAEP7B,CAAD,IAAOG,MAAM,CAACH,CAAC,CAACM,KAAH,CAFL,CAAb;AAGAO,IAAAA,GAAG,CAACF,SAAJ,CAAc,OAAd,EACG9B,IADH,CACQA,IADR,EAEGiD,KAFH,GAGGhB,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,MAJR,EAIgB,MAJhB,EAKGA,IALH,CAKQ,QALR,EAKmBf,CAAD,IAAOA,CAAC,CAAC+B,KAL3B,EAMGhB,IANH,CAMQ,cANR,EAMwB,CANxB,EAOGA,IAPH,CAOQ,GAPR,EAOcf,CAAD,IAAO2B,IAAI,CAAC3B,CAAC,CAACD,KAAH,CAPxB;AAQD,GArDD,EAqDG,CAAClB,IAAD,CArDH,EAN0C,CA2D9B;;AAEZ,sBAAO;AAAK,IAAA,GAAG,EAAEE,MAAV;AAAkB,IAAA,KAAK,EAAEK,QAAzB;AAAmC,IAAA,MAAM,EAAEG;AAA3C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9DD;;GAAMX,S;;KAAAA,S;AAgEN,eAAeA,SAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst Histogram = ({ data, dimensions }) => {\n  const svgRef = React.useRef(null);\n  const { width, height, margin } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n \n  React.useEffect(() => {\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(data[0].items, (d) => d.date))\n      .range([0, width]);\n    const yScale = d3.scaleLinear()\n      .domain([\n        d3.min(data[0].items, (d) => d.value) - 50,\n        d3.max(data[0].items, (d) => d.value) + 50\n      ])\n      .range([height, 0]);\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n   // Add X grid lines with labels\n   const xAxis = d3.axisBottom(xScale)\n     .ticks(5)\n     .tickSize(-height + margin.bottom);\n   const xAxisGroup = svg.append(\"g\")\n     .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n     .call(xAxis);\n   xAxisGroup.select(\".domain\").remove();\n   xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   xAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n   // Add Y grid lines with labels\n   const yAxis = d3.axisLeft(yScale)\n     .ticks(5)\n     .tickSize(-width)\n     .tickFormat((val) => `${val}%`);\n   const yAxisGroup = svg.append(\"g\").call(yAxis);\n   yAxisGroup.select(\".domain\").remove();\n   yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   yAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n    // Draw the lines\n    const line = d3.line()\n      .x((d) => xScale(d.date))\n      .y((d) => yScale(d.value));\n    svg.selectAll(\".line\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", (d) => line(d.items));\n  }, [data]); // Redraw chart if data changes\n \n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n};\n \nexport default Histogram;\n\n// // set the dimensions and margins of the graph\n// var margin = {top: 10, right: 30, bottom: 30, left: 40},\n//     width = 460 - margin.left - margin.right,\n//     height = 400 - margin.top - margin.bottom;\n\n// // append the svg object to the body of the page\n// var svg = d3.select(\"#my_dataviz\")\n//   .append(\"svg\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//   .append(\"g\")\n//     .attr(\"transform\",\n//           \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// // get the data\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n\n//   // X axis: scale and draw:\n//   var x = d3.scaleLinear()\n//       .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n//       .range([0, width]);\n//   svg.append(\"g\")\n//       .attr(\"transform\", \"translate(0,\" + height + \")\")\n//       .call(d3.axisBottom(x));\n\n//   // Y axis: initialization\n//   var y = d3.scaleLinear()\n//       .range([height, 0]);\n//   var yAxis = svg.append(\"g\")\n\n//   // A function that builds the graph for a specific value of bin\n//   function update(nBin) {\n\n//     // set the parameters for the histogram\n//     var histogram = d3.histogram()\n//         .value(function(d) { return d.price; })   // I need to give the vector of value\n//         .domain(x.domain())  // then the domain of the graphic\n//         .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n//     // And apply this function to data to get the bins\n//     var bins = histogram(data);\n\n//     // Y axis: update now that we know the domain\n//     y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//     yAxis\n//         .transition()\n//         .duration(1000)\n//         .call(d3.axisLeft(y));\n\n//     // Join the rect with the bins data\n//     var u = svg.selectAll(\"rect\")\n//         .data(bins)\n\n//     // Manage the existing bars and eventually the new ones:\n//     u\n//         .enter()\n//         .append(\"rect\") // Add a new rect for each new elements\n//         .merge(u) // get the already existing elements as well\n//         .transition() // and apply changes to all of them\n//         .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"fill\", \"#69b3a2\")\n\n\n//     // If less bar in the new histogram, I delete the ones not in use anymore\n//     u\n//         .exit()\n//         .remove()\n\n//     }\n\n\n//   // Initialize with 20 bins\n//   update(20)\n\n\n//   // Listen to the button -> update if user change it\n//   d3.select(\"#nBin\").on(\"input\", function() {\n//     update(+this.value);\n//   });\n\n// });"]},"metadata":{},"sourceType":"module"}