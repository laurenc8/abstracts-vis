{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Histogram(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    // X axis: scale and draw:\n    var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n    var y = d3.scaleLinear().range([height, 0]);\n    var yAxis = svg.append(\"g\"); // A function that builds the graph for a specific value of bin\n\n    function update(nBin) {\n      // set the parameters for the histogram\n      var histogram = d3.histogram().value(function (d) {\n        return d.price;\n      }) // I need to give the vector of value\n      .domain(x.domain()) // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n      // And apply this function to data to get the bins\n\n      var bins = histogram(data); // Y axis: update now that we know the domain\n\n      y.domain([0, d3.max(bins, function (d) {\n        return d.length;\n      })]); // d3.hist has to be called before the Y axis obviously\n\n      yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n      var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n      u.enter().append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n      }).attr(\"width\", function (d) {\n        return x(d.x1) - x(d.x0) - 1;\n      }).attr(\"height\", function (d) {\n        return height - y(d.length);\n      }).style(\"fill\", \"#69b3a2\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n      u.exit().remove();\n    } // Initialize with 20 bins\n\n\n    update(20);\n  }, [data.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      height: 500,\n      width: \"100%\",\n      marginRight: \"0px\",\n      marginLeft: \"0px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"plot-area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"x-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Histogram, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["useD3","React","d3","Histogram","data","ref","svg","x","scaleLinear","domain","range","width","append","attr","height","call","axisBottom","y","yAxis","update","nBin","histogram","value","d","price","thresholds","ticks","bins","max","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram({ data }) {\n  const ref = useD3(\n    (svg) => {\n      // X axis: scale and draw:\n  var x = d3.scaleLinear()\n  .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n  .range([0, width]);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .call(d3.axisBottom(x));\n\n// Y axis: initialization\nvar y = d3.scaleLinear()\n  .range([height, 0]);\nvar yAxis = svg.append(\"g\")\n\n// A function that builds the graph for a specific value of bin\nfunction update(nBin) {\n\n// set the parameters for the histogram\nvar histogram = d3.histogram()\n    .value(function(d) { return d.price; })   // I need to give the vector of value\n    .domain(x.domain())  // then the domain of the graphic\n    .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n// And apply this function to data to get the bins\nvar bins = histogram(data);\n\n// Y axis: update now that we know the domain\ny.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\nyAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisLeft(y));\n\n// Join the rect with the bins data\nvar u = svg.selectAll(\"rect\")\n    .data(bins)\n\n// Manage the existing bars and eventually the new ones:\nu\n    .enter()\n    .append(\"rect\") // Add a new rect for each new elements\n    .merge(u) // get the already existing elements as well\n    .transition() // and apply changes to all of them\n    .duration(1000)\n      .attr(\"x\", 1)\n      .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n      .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n      .attr(\"height\", function(d) { return height - y(d.length); })\n      .style(\"fill\", \"#69b3a2\")\n\n\n// If less bar in the new histogram, I delete the ones not in use anymore\nu\n    .exit()\n    .remove()\n\n}\n\n\n// Initialize with 20 bins\nupdate(20)\n    },\n    [data.length]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}