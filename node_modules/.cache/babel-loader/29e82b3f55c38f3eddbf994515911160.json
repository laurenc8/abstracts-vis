{"ast":null,"code":"import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst Histogram = () => {\n  // set the dimensions and margins of the graph\n  var margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 40\n  },\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n  var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // get the data\n\n  d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function (data) {\n    // X axis: scale and draw:\n    var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n    var y = d3.scaleLinear().range([height, 0]);\n    var yAxis = svg.append(\"g\"); // A function that builds the graph for a specific value of bin\n\n    function update(nBin) {\n      // set the parameters for the histogram\n      var histogram = d3.histogram().value(function (d) {\n        return d.price;\n      }) // I need to give the vector of value\n      .domain(x.domain()) // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n      // And apply this function to data to get the bins\n\n      var bins = histogram(data); // Y axis: update now that we know the domain\n\n      y.domain([0, d3.max(bins, function (d) {\n        return d.length;\n      })]); // d3.hist has to be called before the Y axis obviously\n\n      yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n      var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n      u.enter().append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n      }).attr(\"width\", function (d) {\n        return x(d.x1) - x(d.x0) - 1;\n      }).attr(\"height\", function (d) {\n        return height - y(d.length);\n      }).style(\"fill\", \"#69b3a2\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n      u.exit().remove();\n    } // Initialize with 20 bins\n\n\n    update(20); // Listen to the button -> update if user change it\n\n    d3.select(\"#nBin\").on(\"input\", function () {\n      update(+this.value);\n    });\n  });\n};\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["React","d3","Histogram","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","data","x","scaleLinear","domain","range","call","axisBottom","y","yAxis","update","nBin","histogram","value","d","price","thresholds","ticks","bins","max","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","on"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst Histogram = () => {\n    // set the dimensions and margins of the graph\n  var margin = {top: 10, right: 30, bottom: 30, left: 40},\n  width = 460 - margin.left - margin.right,\n  height = 400 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  var svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n  .attr(\"width\", width + margin.left + margin.right)\n  .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n  .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // get the data\n  d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n\n  // X axis: scale and draw:\n  var x = d3.scaleLinear()\n    .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n  svg.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // Y axis: initialization\n  var y = d3.scaleLinear()\n    .range([height, 0]);\n  var yAxis = svg.append(\"g\")\n\n  // A function that builds the graph for a specific value of bin\n  function update(nBin) {\n\n  // set the parameters for the histogram\n  var histogram = d3.histogram()\n      .value(function(d) { return d.price; })   // I need to give the vector of value\n      .domain(x.domain())  // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n  // And apply this function to data to get the bins\n  var bins = histogram(data);\n\n  // Y axis: update now that we know the domain\n  y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n  yAxis\n      .transition()\n      .duration(1000)\n      .call(d3.axisLeft(y));\n\n  // Join the rect with the bins data\n  var u = svg.selectAll(\"rect\")\n      .data(bins)\n\n  // Manage the existing bars and eventually the new ones:\n  u\n      .enter()\n      .append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000)\n        .attr(\"x\", 1)\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n        .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n        .attr(\"height\", function(d) { return height - y(d.length); })\n        .style(\"fill\", \"#69b3a2\")\n\n\n  // If less bar in the new histogram, I delete the ones not in use anymore\n  u\n      .exit()\n      .remove()\n\n  }\n\n\n  // Initialize with 20 bins\n  update(20)\n\n\n  // Listen to the button -> update if user change it\n  d3.select(\"#nBin\").on(\"input\", function() {\n  update(+this.value);\n  });\n\n  });\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}