{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/naomikenyatta/abstracts-vis/src/components/test.js\";\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Test = function Test() {\n  // List of words\n  var myWords = [{\n    word: \"Running\",\n    size: \"10\"\n  }, {\n    word: \"Surfing\",\n    size: \"20\"\n  }, {\n    word: \"Climbing\",\n    size: \"50\"\n  }, {\n    word: \"Kiting\",\n    size: \"30\"\n  }, {\n    word: \"Sailing\",\n    size: \"20\"\n  }, {\n    word: \"Snowboarding\",\n    size: \"60\"\n  }]; // set the dimensions and margins of the graph\n\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 450 - margin.left - margin.right,\n      height = 450 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Constructs a new cloud layout instance. It run an algorithm to find the position of words that suits your requirements\n    // Wordcloud features that are different from one word to the other must be here\n\n    var layout = d3.layout.cloud().size([width, height]).words(myWords.map(function (d) {\n      return {\n        text: d.word,\n        size: d.size\n      };\n    })).padding(5) //space between words\n    .rotate(function () {\n      return ~~(Math.random() * 2) * 90;\n    }).fontSize(function (d) {\n      return d.size;\n    }) // font size of words\n    .on(\"end\", draw);\n    layout.start(); // This function takes the output of 'layout' above and draw the words\n    // Wordcloud features that are THE SAME from one word to the other can be here\n\n    function draw(words) {\n      svg.append(\"g\").attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\").selectAll(\"text\").data(words).enter().append(\"text\").style(\"font-size\", function (d) {\n        return d.size;\n      }).style(\"fill\", \"#69b3a2\").attr(\"text-anchor\", \"middle\").style(\"font-family\", \"Impact\").attr(\"transform\", function (d) {\n        return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n      }).text(function (d) {\n        return d.text;\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    style: {\n      height: 350,\n      width: 500\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/test.js"],"names":["useD3","React","d3","Test","myWords","word","size","margin","top","right","bottom","left","width","height","ref","svg","select","append","attr","layout","cloud","words","map","d","text","padding","rotate","Math","random","fontSize","on","draw","start","selectAll","data","enter","style","x","y"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nconst Test = () => {\n\n// List of words\nvar myWords = [{word: \"Running\", size: \"10\"}, {word: \"Surfing\", size: \"20\"}, {word: \"Climbing\", size: \"50\"}, {word: \"Kiting\", size: \"30\"}, {word: \"Sailing\", size: \"20\"}, {word: \"Snowboarding\", size: \"60\"} ]\n\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 450 - margin.left - margin.right,\n    height = 450 - margin.top - margin.bottom;\n\nconst ref = useD3(\n      (svg) => {\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Constructs a new cloud layout instance. It run an algorithm to find the position of words that suits your requirements\n    // Wordcloud features that are different from one word to the other must be here\n    var layout = d3.layout.cloud()\n      .size([width, height])\n      .words(myWords.map(function(d) { return {text: d.word, size:d.size}; }))\n      .padding(5)        //space between words\n      .rotate(function() { return ~~(Math.random() * 2) * 90; })\n      .fontSize(function(d) { return d.size; })      // font size of words\n      .on(\"end\", draw);\n    layout.start();\n\n    // This function takes the output of 'layout' above and draw the words\n    // Wordcloud features that are THE SAME from one word to the other can be here\n    function draw(words) {\n      svg\n        .append(\"g\")\n          .attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\")\n          .selectAll(\"text\")\n            .data(words)\n          .enter().append(\"text\")\n            .style(\"font-size\", function(d) { return d.size; })\n            .style(\"fill\", \"#69b3a2\")\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"font-family\", \"Impact\")\n            .attr(\"transform\", function(d) {\n              return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n            })\n            .text(function(d) { return d.text; });\n    }\n  });\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 350,\n        width: 500,\n      }}\n    />\n  );\n}\nexport default Test\n"]},"metadata":{},"sourceType":"module"}