{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/naomikenyatta/abstracts-vis/src/components/histogram.js\";\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Histogram = function Histogram(_ref) {\n  var data = _ref.data,\n      nBin = _ref.nBin;\n  console.log(nBin);\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom;\n  var svg = d3.select(\"#hii\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n  .range([0, width]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n  var histogram = d3.histogram().value(data) // I need to give the vector of value\n  .domain(x.domain()) // then the domain of the graphic\n  .thresholds(x.ticks(70));\n  var bins = histogram(nBin);\n  var y = d3.scaleLinear().range([height, 0]);\n  y.domain([0, 300]); // d3.hist has to be called before the Y axis obviously\n\n  svg.append(\"g\").call(d3.axisLeft(y)); // append the bar rectangles to the svg element\n\n  svg.selectAll(\"rect\").data(bins).enter().append(\"rect\").attr(\"x\", 1).attr(\"transform\", function (d) {\n    return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n  }).attr(\"width\", function (d) {\n    return x(d.x1) - x(d.x0) - 1;\n  }).attr(\"height\", function (d) {\n    return height - y(d.length);\n  }).style(\"fill\", \"#69b3a2\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"hii\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    style: {\n      height: 350,\n      width: 500,\n      transform: \"rotate(90deg)\",\n      transformOrigin: 150\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/histogram.js"],"names":["useD3","React","d3","Histogram","data","nBin","console","log","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleLinear","domain","range","call","axisBottom","histogram","value","thresholds","ticks","bins","y","axisLeft","selectAll","enter","d","x0","length","x1","style","transform","transformOrigin"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\n\nconst Histogram = ( { data, nBin} ) => {\n  console.log(nBin)\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n    var svg = d3.select(\"#hii\")\n      .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var x = d3.scaleLinear()\n      .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n      .range([0, width]);\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n\n    var histogram = d3.histogram()\n      .value(data)   // I need to give the vector of value\n      .domain(x.domain())  // then the domain of the graphic\n      .thresholds(x.ticks(70));\n\n    var bins = histogram(nBin);\n\n    var y = d3.scaleLinear()\n      .range([height, 0]);\n      y.domain([0, 300]);   // d3.hist has to be called before the Y axis obviously\n    svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n  // append the bar rectangles to the svg element\n  svg.selectAll(\"rect\")\n      .data(bins)\n      .enter()\n      .append(\"rect\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n        .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n        .attr(\"height\", function(d) { return height - y(d.length); })\n        .style(\"fill\", \"#69b3a2\")\n\n\n  return (\n    <div id=\"hii\">\n    <svg\n      style={{\n        height: 350,\n        width: 500,\n        transform: \"rotate(90deg)\",\n        transformOrigin: 150\n      }}\n    />\n    </div>\n  );\n}\n\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}