import React from "react";
declare type D3NodeHandle = {
    flush: () => void;
};
declare class FauxStyle {
    ref: React.RefObject<HTMLElement>;
    style: {
        [key: string]: string | null;
    };
    constructor(ref: React.RefObject<HTMLElement>, style?: {
        [key: string]: string | null;
    });
    setProperty: CSSStyleDeclaration["setProperty"];
    getPropertyValue: CSSStyleDeclaration["getPropertyValue"];
    removeProperty: CSSStyleDeclaration["removeProperty"];
}
export declare class D3Element {
    id: string;
    isRoot: boolean;
    ref: React.RefObject<HTMLElement>;
    mountRef: React.RefObject<D3NodeHandle>;
    nodeType: number;
    nodeName: string;
    text: string;
    parentNode?: D3Element;
    childNodes: D3Element[];
    attrs: {
        [key: string]: string | null;
    };
    style: FauxStyle;
    eventListeners: {
        [key: string]: EventListenerOrEventListenerObject[];
    };
    constructor(nodeName: string, initialValues?: {
        parentNode?: D3Element;
        nodeType: number;
        attrs: {
            [key: string]: string | null;
        };
        styles: {
            [key: string]: string | null;
        };
    }, isRoot?: boolean);
    getAttr(): {
        [x: string]: string | null;
    };
    getStyle(): {
        [x: string]: string | null;
    };
    setAttribute: Element["setAttribute"];
    setAttributeNS: Element["setAttributeNS"];
    getAttribute: Element["getAttribute"];
    getAttributeNS: Element["getAttributeNS"];
    getAttributeNode: Element["getAttributeNode"];
    getAttributeNodeNS: Element["getAttributeNodeNS"];
    removeAttribute: Element["removeAttribute"];
    removeAttributeNS: Element["removeAttributeNS"];
    addEventListener: (name: string, fn: EventListenerOrEventListenerObject) => void;
    removeEventListener: (name: string, fn: EventListenerOrEventListenerObject) => void;
    appendChild(el: D3Element): D3Element;
    insertBefore(el: D3Element, before: D3Element): D3Element;
    removeChild(child: D3Element): void;
    querySelector(selector: string): any;
    querySelectorAll(selector: string): any;
    getElementsByTagName(nodeName: string): D3Element[];
    getElementsByTagNameNS: (ns: string, nodeName: string) => D3Element[];
    getElementById(id: string): D3Element | null;
    getElementByIdNS: (ns: string, id: string) => D3Element | null;
    cloneNode(deep?: boolean): D3Element;
    getBoundingClientRect: () => DOMRect | undefined;
    compareDocumentPosition(other: D3Element): number;
    createSVGPoint(): any;
    getScreenCTM(): any;
    get ownerDocument(): {
        Element: typeof D3Element;
        defaultView: {
            getComputedStyle: (node: D3Element) => {
                getPropertyValue: (property: string) => string;
            };
        };
        createElement: (nodeName: string) => D3Element;
        createElementNS: (ns: string, nodeName: string) => D3Element;
        compareDocumentPosition: () => 8;
    };
    get ownerSVGElement(): D3Element | null;
    get nextSibling(): D3Element | undefined;
    get previousSibling(): D3Element | undefined;
    get clientLeft(): number | undefined;
    get clientTop(): number | undefined;
    get innerHTML(): string;
    set innerHTML(text: string);
    get textContent(): string;
    set textContent(text: string);
    get children(): D3Element[];
    toReact(): React.ReactElement;
    Mounter: React.ForwardRefExoticComponent<React.RefAttributes<D3NodeHandle>>;
    renderElement(): React.ReactElement | null;
}
export {};
