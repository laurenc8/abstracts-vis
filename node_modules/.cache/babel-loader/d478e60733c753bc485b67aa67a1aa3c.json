{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/naomikenyatta/abstracts-vis/src/components/test.js\";\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Test = function Test(_ref) {\n  var data = _ref.data;\n  // set the dimensions and margins of the graph\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 450 - margin.left - margin.right,\n      height = 450 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    // append the svg object to the body of the page\n    svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Initialize the links\n\n    var link = svg.selectAll(\"line\").data(data.word).enter().append(\"line\").style(\"stroke\", \"#aaa\"); // Initialize the nodes\n\n    var node = svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"r\", 20).style(\"fill\", \"#69b3a2\"); // Let's list the force we wanna apply on the network\n\n    var simulation = d3.forceSimulation(data.nodes) // Force algorithm is applied to data.nodes\n    .force(\"link\", d3.forceLink() // This force provides links between nodes\n    .id(function (d) {\n      return d.name;\n    }) // This provide  the id of a node\n    .links(data.links) // and this the list of links\n    ).force(\"charge\", d3.forceManyBody().strength(-400)) // This adds repulsion between nodes. Play with the -400 for the repulsion strength\n    .force(\"center\", d3.forceCenter(width / 2, height / 2)) // This force attracts nodes to the center of the svg area\n    .on(\"end\", ticked); // This function is run at each iteration of the force algorithm, updating the nodes position.\n\n    function ticked() {\n      link.attr(\"x1\", function (d) {\n        return d.source.x;\n      }).attr(\"y1\", function (d) {\n        return d.source.y;\n      }).attr(\"x2\", function (d) {\n        return d.target.x;\n      }).attr(\"y2\", function (d) {\n        return d.target.y;\n      });\n      node.attr(\"cx\", function (d) {\n        return d.x + 6;\n      }).attr(\"cy\", function (d) {\n        return d.y - 6;\n      });\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/test.js"],"names":["useD3","React","d3","Test","data","margin","top","right","bottom","left","width","height","ref","svg","append","attr","link","selectAll","word","enter","style","node","simulation","forceSimulation","nodes","force","forceLink","id","d","name","links","forceManyBody","strength","forceCenter","on","ticked","source","x","y","target"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\n\n\nconst Test = ({data}) => {\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 450 - margin.left - margin.right,\n    height = 450 - margin.top - margin.bottom;\n\nconst ref = useD3(\n      (svg) => {\n\n    // append the svg object to the body of the page\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n      // Initialize the links\n      var link = svg\n        .selectAll(\"line\")\n        .data(data.word)\n        .enter()\n        .append(\"line\")\n          .style(\"stroke\", \"#aaa\")\n\n      // Initialize the nodes\n      var node = svg\n        .selectAll(\"circle\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n          .attr(\"r\", 20)\n          .style(\"fill\", \"#69b3a2\")\n\n      // Let's list the force we wanna apply on the network\n      var simulation = d3.forceSimulation(data.nodes)                 // Force algorithm is applied to data.nodes\n          .force(\"link\", d3.forceLink()                               // This force provides links between nodes\n                .id(function(d) { return d.name; })                     // This provide  the id of a node\n                .links(data.links)                                    // and this the list of links\n          )\n          .force(\"charge\", d3.forceManyBody().strength(-400))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength\n          .force(\"center\", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area\n          .on(\"end\", ticked);\n\n      // This function is run at each iteration of the force algorithm, updating the nodes position.\n      function ticked() {\n        link\n            .attr(\"x1\", function(d) { return d.source.x; })\n            .attr(\"y1\", function(d) { return d.source.y; })\n            .attr(\"x2\", function(d) { return d.target.x; })\n            .attr(\"y2\", function(d) { return d.target.y; });\n\n        node\n             .attr(\"cx\", function (d) { return d.x+6; })\n             .attr(\"cy\", function(d) { return d.y-6; });\n      }\n\n    });\n  return (\n    <svg\n      ref={ref}\n    />\n  );\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}