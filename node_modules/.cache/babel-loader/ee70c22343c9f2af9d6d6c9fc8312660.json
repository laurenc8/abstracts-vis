{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\";\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram(_ref, nBin) {\n  var data = _ref.data;\n  console.log(nBin);\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    // X axis: scale and draw:\n    var x = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n      return +d.frequency;\n    }) + 10]).range([30, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + (height + 10) + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n    var y = d3.scaleLinear().range([height, 0]);\n    var yAxis = svg.append(\"g\").attr(\"transform\", \"translate(30, 10)\"); // A function that builds the graph for a specific value of bin\n\n    function update(nBin) {\n      // set the parameters for the histogram\n      var histogram = d3.histogram().value(function (d) {\n        return d.frequency;\n      }) // I need to give the vector of value\n      .domain(x.domain()) // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n      // And apply this function to data to get the bins\n\n      var bins = histogram(data); // Y axis: update now that we know the domain\n\n      y.domain([0, d3.max(bins, function (d) {\n        return d.length;\n      })]); // d3.hist has to be called before the Y axis obviously\n\n      yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n      var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n      u.enter().append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + x(d.x0) + \",\" + (y(d.length) + 10) + \")\";\n      }).attr(\"width\", function (d) {\n        return x(d.x1) - x(d.x0) - 4;\n      }).attr(\"height\", function (d) {\n        return height - y(d.length);\n      }).style(\"stroke\", \"#dcd0ff\").style(\"stroke-width\", \"3px\").style(\"fill\", \"none\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n      u.exit().remove();\n    } // Initialize with 20 bins\n\n\n    update(nBin); // Listen to the button -> update if user change it\n    // d3.select(\"#nBin\").on(\"input\", function() {\n    //   update(+this.value);\n    // });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    style: {\n      height: 350,\n      width: 500,\n      transform: \"rotate(90deg)\",\n      transformOrigin: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["useD3","React","d3","Histogram","nBin","data","console","log","margin","top","right","bottom","left","width","height","ref","svg","x","scaleLinear","domain","max","d","frequency","range","append","attr","call","axisBottom","y","yAxis","update","histogram","value","thresholds","ticks","bins","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","transform","transformOrigin"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram({ data }, nBin) {\n  console.log(nBin)\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  const ref = useD3(\n    (svg) => {\n      // X axis: scale and draw:\n      var x = d3.scaleLinear()\n        .domain([0, d3.max(data, function(d) { return +d.frequency }) + 10])\n        .range([30, width]);\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n        .call(d3.axisBottom(x));\n\n      // Y axis: initialization\n      var y = d3.scaleLinear()\n        .range([height, 0]);\n      var yAxis = svg.append(\"g\")\n        .attr(\"transform\", \"translate(30, 10)\")\n\n      // A function that builds the graph for a specific value of bin\n      function update(nBin) {\n\n      // set the parameters for the histogram\n      var histogram = d3.histogram()\n          .value(function(d) { return d.frequency; })   // I need to give the vector of value\n          .domain(x.domain())  // then the domain of the graphic\n          .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n      // And apply this function to data to get the bins\n      var bins = histogram(data);\n\n      // Y axis: update now that we know the domain\n      y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n      yAxis\n          .transition()\n          .duration(1000)\n          .call(d3.axisLeft(y));\n\n      // Join the rect with the bins data\n      var u = svg.selectAll(\"rect\")\n          .data(bins)\n\n      // Manage the existing bars and eventually the new ones:\n      u\n          .enter()\n          .append(\"rect\") // Add a new rect for each new elements\n          .merge(u) // get the already existing elements as well\n          .transition() // and apply changes to all of them\n          .duration(1000)\n            .attr(\"x\", 1)\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n            .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n            .attr(\"height\", function(d) { return height - y(d.length); })\n            .style(\"stroke\", \"#dcd0ff\")\n            .style(\"stroke-width\", \"3px\")\n            .style(\"fill\", \"none\")\n\n\n      // If less bar in the new histogram, I delete the ones not in use anymore\n      u\n          .exit()\n          .remove()\n\n      }\n\n      // Initialize with 20 bins\n      update(nBin)\n\n      // Listen to the button -> update if user change it\n      // d3.select(\"#nBin\").on(\"input\", function() {\n      //   update(+this.value);\n      // });\n    });\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 350,\n        width: 500,\n        transform: \"rotate(90deg)\",\n        transformOrigin: 150\n      }}\n    />\n  );\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}