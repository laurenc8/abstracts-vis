{"ast":null,"code":"import ascending from \"./ascending.js\";\nexport default function bisector(f) {\n  var delta = f;\n  var compare1 = f;\n  var compare2 = f;\n\n  if (f.length !== 2) {\n    delta = function delta(d, x) {\n      return f(d) - x;\n    };\n\n    compare1 = ascending;\n\n    compare2 = function compare2(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  function left(a, x) {\n    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        var mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function right(a, x) {\n    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n\n      do {\n        var mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n\n    return lo;\n  }\n\n  function center(a, x) {\n    var lo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var hi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a.length;\n    var i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {\n    left: left,\n    center: center,\n    right: right\n  };\n}","map":null,"metadata":{},"sourceType":"module"}