{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/naomikenyatta/abstracts-vis/src/components/test.js\";\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Test = function Test() {\n  // List of words\n  var myWords = [{\n    word: \"Running\",\n    size: \"10\"\n  }, {\n    word: \"Surfing\",\n    size: \"20\"\n  }, {\n    word: \"Climbing\",\n    size: \"50\"\n  }, {\n    word: \"Kiting\",\n    size: \"30\"\n  }, {\n    word: \"Sailing\",\n    size: \"20\"\n  }, {\n    word: \"Snowboarding\",\n    size: \"60\"\n  }]; // set the dimensions and margins of the graph\n\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 450 - margin.left - margin.right,\n      height = 450 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 40\n    },\n        width = 400 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_network.json\", function (data) {\n      // Initialize the links\n      var link = svg.selectAll(\"line\").data(data.links).enter().append(\"line\").style(\"stroke\", \"#aaa\"); // Initialize the nodes\n\n      var node = svg.selectAll(\"circle\").data(data.nodes).enter().append(\"circle\").attr(\"r\", 20).style(\"fill\", \"#69b3a2\"); // Let's list the force we wanna apply on the network\n\n      var simulation = d3.forceSimulation(data.nodes) // Force algorithm is applied to data.nodes\n      .force(\"link\", d3.forceLink() // This force provides links between nodes\n      .id(function (d) {\n        return d.id;\n      }) // This provide  the id of a node\n      .links(data.links) // and this the list of links\n      ).force(\"charge\", d3.forceManyBody().strength(-400)) // This adds repulsion between nodes. Play with the -400 for the repulsion strength\n      .force(\"center\", d3.forceCenter(width / 2, height / 2)) // This force attracts nodes to the center of the svg area\n      .on(\"end\", ticked); // This function is run at each iteration of the force algorithm, updating the nodes position.\n\n      function ticked() {\n        link.attr(\"x1\", function (d) {\n          return d.source.x;\n        }).attr(\"y1\", function (d) {\n          return d.source.y;\n        }).attr(\"x2\", function (d) {\n          return d.target.x;\n        }).attr(\"y2\", function (d) {\n          return d.target.y;\n        });\n        node.attr(\"cx\", function (d) {\n          return d.x + 6;\n        }).attr(\"cy\", function (d) {\n          return d.y - 6;\n        });\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    style: {\n      height: 350,\n      width: 500\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/test.js"],"names":["useD3","React","d3","Test","myWords","word","size","margin","top","right","bottom","left","width","height","ref","svg","select","append","attr","json","data","link","selectAll","links","enter","style","node","nodes","simulation","forceSimulation","force","forceLink","id","d","forceManyBody","strength","forceCenter","on","ticked","source","x","y","target"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nconst Test = () => {\n\n// List of words\nvar myWords = [{word: \"Running\", size: \"10\"}, {word: \"Surfing\", size: \"20\"}, {word: \"Climbing\", size: \"50\"}, {word: \"Kiting\", size: \"30\"}, {word: \"Sailing\", size: \"20\"}, {word: \"Snowboarding\", size: \"60\"} ]\n\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 450 - margin.left - margin.right,\n    height = 450 - margin.top - margin.bottom;\n\nconst ref = useD3(\n      (svg) => {\n    // set the dimensions and margins of the graph\n    var margin = {top: 10, right: 30, bottom: 30, left: 40},\n      width = 400 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n      .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_network.json\", function( data) {\n\n      // Initialize the links\n      var link = svg\n        .selectAll(\"line\")\n        .data(data.links)\n        .enter()\n        .append(\"line\")\n          .style(\"stroke\", \"#aaa\")\n\n      // Initialize the nodes\n      var node = svg\n        .selectAll(\"circle\")\n        .data(data.nodes)\n        .enter()\n        .append(\"circle\")\n          .attr(\"r\", 20)\n          .style(\"fill\", \"#69b3a2\")\n\n      // Let's list the force we wanna apply on the network\n      var simulation = d3.forceSimulation(data.nodes)                 // Force algorithm is applied to data.nodes\n          .force(\"link\", d3.forceLink()                               // This force provides links between nodes\n                .id(function(d) { return d.id; })                     // This provide  the id of a node\n                .links(data.links)                                    // and this the list of links\n          )\n          .force(\"charge\", d3.forceManyBody().strength(-400))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength\n          .force(\"center\", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area\n          .on(\"end\", ticked);\n\n      // This function is run at each iteration of the force algorithm, updating the nodes position.\n      function ticked() {\n        link\n            .attr(\"x1\", function(d) { return d.source.x; })\n            .attr(\"y1\", function(d) { return d.source.y; })\n            .attr(\"x2\", function(d) { return d.target.x; })\n            .attr(\"y2\", function(d) { return d.target.y; });\n\n        node\n             .attr(\"cx\", function (d) { return d.x+6; })\n             .attr(\"cy\", function(d) { return d.y-6; });\n      }\n\n    });\n  });\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 350,\n        width: 500,\n      }}\n    />\n  );\n}\nexport default Test\n"]},"metadata":{},"sourceType":"module"}