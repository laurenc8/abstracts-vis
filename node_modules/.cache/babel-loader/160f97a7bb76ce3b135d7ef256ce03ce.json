{"ast":null,"code":"import React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram(_ref) {\n  var data = _ref.data,\n      nBin = _ref.nBin;\n  console.log(nBin);\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom;\n  var ref = useD3(function (svg) {\n    var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // set the parameters for the histogram\n\n    var histogram = d3.histogram().value(function (d) {\n      return d.numbers;\n    }) // I need to give the vector of value\n    .domain(x.domain()) // then the domain of the graphic\n    .thresholds(x.ticks(70)); // then the numbers of bins\n    // And apply this function to data to get the bins\n\n    var bins = histogram(data); // Y axis: scale and draw:\n\n    var y = d3.scaleLinear().range([height, 0]);\n    y.domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]); // d3.hist has to be called before the Y axis obviously\n\n    svg.append(\"g\").call(d3.axisLeft(y)); // append the bar rectangles to the svg element\n\n    svg.selectAll(\"rect\").data(bins).enter().append(\"rect\").attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return x(d.x1) - x(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return height - y(d.length);\n    }).style(\"fill\", \"#69b3a2\"); // // Y axis: initialization\n    // var y = d3.scaleLinear()\n    //   //.domain([0, d3.max(data, function(d) { return d.length; })])\n    //   .range([height, 0]);\n    // var yAxis = svg.append(\"g\")\n    //    .attr(\"transform\", \"translate(30, 10)\")\n    //\n    // // A function that builds the graph for a specific value of bin\n    //\n    //   // set the parameters for the histogram\n    //   var histogram = d3.histogram()\n    //     .value(function(d) { return d})   // I need to give the vector of value\n    //     .domain(x.domain())  // then the domain of the graphic\n    //     .thresholds(x.ticks(nBin)); // then the numbers of bins\n    //\n    //   // And apply this function to data to get the bins\n    //   var bins = histogram(data);\n    //\n    //   // Y axis: update now that we know the domain\n    //   y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n    //   yAxis\n    //     .transition()\n    //     .duration(1000)\n    //     .call(d3.axisLeft(y));\n    //\n    //   // Join the rect with the bins data\n    //   var u = svg.selectAll(\"rect\")\n    //     .data(bins)\n  });\n}\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/bar/bar.js"],"names":["React","d3","Histogram","data","nBin","console","log","margin","top","right","bottom","left","width","height","ref","useD3","svg","x","scaleLinear","domain","range","append","attr","call","axisBottom","histogram","value","d","numbers","thresholds","ticks","bins","y","max","length","axisLeft","selectAll","enter","x0","x1","style"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram({ data, nBin}) {\n  console.log(nBin)\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  const ref = useD3(\n    (svg) => {\n\n\n      var x = d3.scaleLinear()\n      .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n      .range([0, width]);\n  svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n  // set the parameters for the histogram\n  var histogram = d3.histogram()\n      .value(function(d) { return d.numbers; })   // I need to give the vector of value\n      .domain(x.domain())  // then the domain of the graphic\n      .thresholds(x.ticks(70)); // then the numbers of bins\n\n  // And apply this function to data to get the bins\n  var bins = histogram(data);\n\n  // Y axis: scale and draw:\n  var y = d3.scaleLinear()\n      .range([height, 0]);\n      y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n  svg.append(\"g\")\n      .call(d3.axisLeft(y));\n\n  // append the bar rectangles to the svg element\n  svg.selectAll(\"rect\")\n      .data(bins)\n      .enter()\n      .append(\"rect\")\n        .attr(\"x\", 1)\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n        .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n        .attr(\"height\", function(d) { return height - y(d.length); })\n        .style(\"fill\", \"#69b3a2\")\n\n\n      // // Y axis: initialization\n      // var y = d3.scaleLinear()\n      //   //.domain([0, d3.max(data, function(d) { return d.length; })])\n      //   .range([height, 0]);\n      // var yAxis = svg.append(\"g\")\n      //    .attr(\"transform\", \"translate(30, 10)\")\n      //\n      // // A function that builds the graph for a specific value of bin\n      //\n      //   // set the parameters for the histogram\n      //   var histogram = d3.histogram()\n      //     .value(function(d) { return d})   // I need to give the vector of value\n      //     .domain(x.domain())  // then the domain of the graphic\n      //     .thresholds(x.ticks(nBin)); // then the numbers of bins\n      //\n      //   // And apply this function to data to get the bins\n      //   var bins = histogram(data);\n      //\n      //   // Y axis: update now that we know the domain\n      //   y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n      //   yAxis\n      //     .transition()\n      //     .duration(1000)\n      //     .call(d3.axisLeft(y));\n      //\n      //   // Join the rect with the bins data\n      //   var u = svg.selectAll(\"rect\")\n      //     .data(bins)\n\n    });\n\n}\n\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}