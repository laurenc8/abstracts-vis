{"ast":null,"code":"// //import { useD3 } from '../hooks/useD3';\n// import React from 'react';\n// import * as d3 from 'd3';\n//\n// function Histogram({ data, nBin}) {\n//   console.log(nBin)\n//   var margin = {top: 10, right: 10, bottom: 10, left: 10},\n//     width = 500 - margin.left - margin.right,\n//     height = 300 - margin.top - margin.bottom;\n//\n//   const ref = useD3(\n//     (svg) => {\n//       // X axis: scale and draw:\n//       var x = d3.scaleLinear()\n//         .domain([0, d3.max(data, function(d) { return +d.frequency }) + 10])\n//         .range([30, width]);\n//       svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n//         .call(d3.axisBottom(x));\n//\n//       // Y axis: initialization\n//       var y = d3.scaleLinear()\n//         //.domain([0, d3.max(data, function(d) { return d.length; })])\n//         .range([height, 0]);\n//       var yAxis = svg.append(\"g\")\n//          .attr(\"transform\", \"translate(30, 10)\")\n//\n//       // A function that builds the graph for a specific value of bin\n//       function update(nBin) {\n//         console.log(nBin);\n//\n//         // set the parameters for the histogram\n//         var histogram = d3.histogram()\n//           .value(function(d) { return d.frequency; })   // I need to give the vector of value\n//           .domain(x.domain())  // then the domain of the graphic\n//           .thresholds(x.ticks(nBin)); // then the numbers of bins\n//\n//         // And apply this function to data to get the bins\n//         var bins = histogram(data);\n//\n//         // Y axis: update now that we know the domain\n//         y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//         yAxis\n//           .transition()\n//           .duration(1000)\n//           .call(d3.axisLeft(y));\n//\n//         // Join the rect with the bins data\n//         var u = svg.selectAll(\"rect\")\n//           .data(bins)\n//\n//         // Manage the existing bars and eventually the new ones:\n//         u\n//           .enter()\n//           .append(\"rect\") // Add a new rect for each new elements\n//           .merge(u) // get the already existing elements as well\n//           .transition() // and apply changes to all of them\n//           .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"stroke\", \"#dcd0ff\")\n//           .style(\"stroke-width\", \"3px\")\n//           .style(\"fill\", \"#dcd0ff\")\n//\n//\n//         // If less bar in the new histogram, I delete the ones not in use anymore\n//         u\n//           .exit()\n//           .remove()\n//\n//       }\n//\n//       update(nBin)\n//     });\n//\n//   return (\n//     <svg\n//       ref={ref}\n//       style={{\n//         height: 350,\n//         width: 500,\n//         transform: \"rotate(90deg)\",\n//         transformOrigin: 150\n//       }}\n//     />\n//   );\n// }\n//\n// export default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/Hist/histogram.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// //import { useD3 } from '../hooks/useD3';\n// import React from 'react';\n// import * as d3 from 'd3';\n//\n// function Histogram({ data, nBin}) {\n//   console.log(nBin)\n//   var margin = {top: 10, right: 10, bottom: 10, left: 10},\n//     width = 500 - margin.left - margin.right,\n//     height = 300 - margin.top - margin.bottom;\n//\n//   const ref = useD3(\n//     (svg) => {\n//       // X axis: scale and draw:\n//       var x = d3.scaleLinear()\n//         .domain([0, d3.max(data, function(d) { return +d.frequency }) + 10])\n//         .range([30, width]);\n//       svg.append(\"g\")\n//         .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n//         .call(d3.axisBottom(x));\n//\n//       // Y axis: initialization\n//       var y = d3.scaleLinear()\n//         //.domain([0, d3.max(data, function(d) { return d.length; })])\n//         .range([height, 0]);\n//       var yAxis = svg.append(\"g\")\n//          .attr(\"transform\", \"translate(30, 10)\")\n//\n//       // A function that builds the graph for a specific value of bin\n//       function update(nBin) {\n//         console.log(nBin);\n//\n//         // set the parameters for the histogram\n//         var histogram = d3.histogram()\n//           .value(function(d) { return d.frequency; })   // I need to give the vector of value\n//           .domain(x.domain())  // then the domain of the graphic\n//           .thresholds(x.ticks(nBin)); // then the numbers of bins\n//\n//         // And apply this function to data to get the bins\n//         var bins = histogram(data);\n//\n//         // Y axis: update now that we know the domain\n//         y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//         yAxis\n//           .transition()\n//           .duration(1000)\n//           .call(d3.axisLeft(y));\n//\n//         // Join the rect with the bins data\n//         var u = svg.selectAll(\"rect\")\n//           .data(bins)\n//\n//         // Manage the existing bars and eventually the new ones:\n//         u\n//           .enter()\n//           .append(\"rect\") // Add a new rect for each new elements\n//           .merge(u) // get the already existing elements as well\n//           .transition() // and apply changes to all of them\n//           .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"stroke\", \"#dcd0ff\")\n//           .style(\"stroke-width\", \"3px\")\n//           .style(\"fill\", \"#dcd0ff\")\n//\n//\n//         // If less bar in the new histogram, I delete the ones not in use anymore\n//         u\n//           .exit()\n//           .remove()\n//\n//       }\n//\n//       update(nBin)\n//     });\n//\n//   return (\n//     <svg\n//       ref={ref}\n//       style={{\n//         height: 350,\n//         width: 500,\n//         transform: \"rotate(90deg)\",\n//         transformOrigin: 150\n//       }}\n//     />\n//   );\n// }\n//\n// export default Histogram;\n"]},"metadata":{},"sourceType":"module"}