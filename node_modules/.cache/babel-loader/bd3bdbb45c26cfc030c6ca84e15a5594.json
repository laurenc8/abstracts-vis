{"ast":null,"code":"// //histogram Script\n// <script>\n// // set the dimensions and margins of the graph\n// var margin = {top: 10, right: 30, bottom: 30, left: 30},\n//     width = 460 - margin.left - margin.right,\n//     height = 400 - margin.top - margin.bottom;\n// // append the svg object to the body of the page\n// var svg = d3.select(\"#my_dataviz\")\n//   .append(\"svg\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//   .append(\"g\")\n//     .attr(\"transform\",\n//           \"translate(\" + margin.left + \",\" + margin.top + \")\");\n// // get the data\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n//   // X axis: scale and draw:\n//   var x = d3.scaleLinear()\n//       .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n//       .range([0, width]);\n//   svg.append(\"g\")\n//       .attr(\"transform\", \"translate(0,\" + height + \")\")\n//       .call(d3.axisBottom(x));\n//   // Y axis: initialization\n//   var y = d3.scaleLinear()\n//       .range([height, 0]);\n//   var yAxis = svg.append(\"g\")\n//   // A function that builds the graph for a specific value of bin\n//   function update(nBin) {\n//     // set the parameters for the histogram\n//     var histogram = d3.histogram()\n//         .value(function(d) { return d.price; })   // I need to give the vector of value\n//         .domain(x.domain())  // then the domain of the graphic\n//         .thresholds(x.ticks(nBin)); // then the numbers of bins\n//     // And apply this function to data to get the bins\n//     var bins = histogram(data);\n//     // Y axis: update now that we know the domain\n//     y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//     yAxis\n//         .transition()\n//         .duration(1000)\n//         .call(d3.axisLeft(y));\n//     // Join the rect with the bins data\n//     var u = svg.selectAll(\"rect\")\n//         .data(bins)\n//     // Manage the existing bars and eventually the new ones:\n//     u\n//         .enter()\n//         .append(\"rect\") // Add a new rect for each new elements\n//         .merge(u) // get the already existing elements as well\n//         .transition() // and apply changes to all of them\n//         .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"fill\", \"#69b3a2\")\n//     // If less bar in the new histogram, I delete the ones not in use anymore\n//     u\n//         .exit()\n//         .remove()\n//     }\n//   // Initialize with 20 bins\n//   update(20)\n//   // Listen to the button -> update if user change it\n//   d3.select(\"#nBin\").on(\"input\", function() {\n//     update(+this.value);\n//   });\n// });\n// </script>","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/vis.js"],"names":[],"mappings":"AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["\n// //histogram Script\n// <script>\n\n// // set the dimensions and margins of the graph\n// var margin = {top: 10, right: 30, bottom: 30, left: 30},\n//     width = 460 - margin.left - margin.right,\n//     height = 400 - margin.top - margin.bottom;\n\n// // append the svg object to the body of the page\n// var svg = d3.select(\"#my_dataviz\")\n//   .append(\"svg\")\n//     .attr(\"width\", width + margin.left + margin.right)\n//     .attr(\"height\", height + margin.top + margin.bottom)\n//   .append(\"g\")\n//     .attr(\"transform\",\n//           \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// // get the data\n// d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n\n//   // X axis: scale and draw:\n//   var x = d3.scaleLinear()\n//       .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n//       .range([0, width]);\n//   svg.append(\"g\")\n//       .attr(\"transform\", \"translate(0,\" + height + \")\")\n//       .call(d3.axisBottom(x));\n\n//   // Y axis: initialization\n//   var y = d3.scaleLinear()\n//       .range([height, 0]);\n//   var yAxis = svg.append(\"g\")\n\n//   // A function that builds the graph for a specific value of bin\n//   function update(nBin) {\n\n//     // set the parameters for the histogram\n//     var histogram = d3.histogram()\n//         .value(function(d) { return d.price; })   // I need to give the vector of value\n//         .domain(x.domain())  // then the domain of the graphic\n//         .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n//     // And apply this function to data to get the bins\n//     var bins = histogram(data);\n\n//     // Y axis: update now that we know the domain\n//     y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n//     yAxis\n//         .transition()\n//         .duration(1000)\n//         .call(d3.axisLeft(y));\n\n//     // Join the rect with the bins data\n//     var u = svg.selectAll(\"rect\")\n//         .data(bins)\n\n//     // Manage the existing bars and eventually the new ones:\n//     u\n//         .enter()\n//         .append(\"rect\") // Add a new rect for each new elements\n//         .merge(u) // get the already existing elements as well\n//         .transition() // and apply changes to all of them\n//         .duration(1000)\n//           .attr(\"x\", 1)\n//           .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n//           .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n//           .attr(\"height\", function(d) { return height - y(d.length); })\n//           .style(\"fill\", \"#69b3a2\")\n\n\n//     // If less bar in the new histogram, I delete the ones not in use anymore\n//     u\n//         .exit()\n//         .remove()\n\n//     }\n\n//   // Initialize with 20 bins\n//   update(20)\n\n\n//   // Listen to the button -> update if user change it\n//   d3.select(\"#nBin\").on(\"input\", function() {\n//     update(+this.value);\n//   });\n\n// });\n// </script>\n"]},"metadata":{},"sourceType":"module"}