{"ast":null,"code":"// import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nvar Histogram = function Histogram(_ref) {\n  var data = _ref.data,\n      nBin = _ref.nBin;\n  d3.select('.vis-barchart > *').remove();\n  var margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10\n  },\n      width = 500 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom;\n  var svg = d3.select('.vis-barchart').append('svg').append(\"g\").attr(\"transform\", \"translate(0,\" + (height + 10) + \")\").call(d3.axisBottom(x)); // X axis: scale and draw:\n\n  var x = d3.scaleLinear().domain([0, 200]).range([30, width]); // set the parameters for the histogram\n\n  var histogram = d3.histogram().value(data) // I need to give the vector of value\n  .domain(x.domain()) // then the domain of the graphic\n  .thresholds(x.ticks(nBin)); // then the numbers of bins\n  // Y axis: initialization\n\n  var y = d3.scaleLinear().range([height, 0]);\n  var yAxis = svg.append(\"g\").attr(\"transform\", \"translate(30, 10)\"); // And apply this function to data to get the bins\n\n  var bins = histogram(data);\n  svg.selectAll(\"rect\").data(bins).enter().append(\"rect\") // Add a new rect for each new elements\n  .attr(\"x\", 1).attr(\"transform\", function (d) {\n    return \"translate(\" + x(d.x0) + \",\" + (y(d.length) + 10) + \")\";\n  }).attr(\"width\", function (d) {\n    return x(d.x1) - x(d.x0) - 4;\n  }).attr(\"height\", function (d) {\n    return height - y(d.length);\n  }).style(\"stroke\", \"#dcd0ff\").style(\"stroke-width\", \"3px\").style(\"fill\", \"#dcd0ff\");\n};\n\nexport default Histogram;","map":{"version":3,"sources":["/Users/naomikenyatta/abstracts-vis/src/components/Hist/histogram.js"],"names":["React","d3","Histogram","data","nBin","select","remove","margin","top","right","bottom","left","width","height","svg","append","attr","call","axisBottom","x","scaleLinear","domain","range","histogram","value","thresholds","ticks","y","yAxis","bins","selectAll","enter","d","x0","length","x1","style"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAmB;AAAA,MAAhBC,IAAgB,QAAhBA,IAAgB;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACnCH,EAAAA,EAAE,CAACI,MAAH,CAAU,mBAAV,EAA+BC,MAA/B;AAEA,MAAIC,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,KAAK,EAAE,EAAjB;AAAqBC,IAAAA,MAAM,EAAE,EAA7B;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAb;AAAA,MACEC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADrC;AAAA,MAEEI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFrC;AAIA,MAAII,GAAG,GAAGb,EAAE,CAACI,MAAH,CAAU,eAAV,EAA2BU,MAA3B,CAAkC,KAAlC,EACPA,MADO,CACA,GADA,EAEPC,IAFO,CAEF,WAFE,EAEW,kBAAkBH,MAAM,GAAC,EAAzB,IAA+B,GAF1C,EAGPI,IAHO,CAGFhB,EAAE,CAACiB,UAAH,CAAcC,CAAd,CAHE,CAAV,CAPmC,CAY/B;;AACA,MAAIA,CAAC,GAAGlB,EAAE,CAACmB,WAAH,GACLC,MADK,CACE,CAAC,CAAD,EAAI,GAAJ,CADF,EAELC,KAFK,CAEC,CAAC,EAAD,EAAKV,KAAL,CAFD,CAAR,CAb+B,CAiB7B;;AACA,MAAIW,SAAS,GAAGtB,EAAE,CAACsB,SAAH,GACbC,KADa,CACPrB,IADO,EACC;AADD,GAEbkB,MAFa,CAENF,CAAC,CAACE,MAAF,EAFM,EAEO;AAFP,GAGbI,UAHa,CAGFN,CAAC,CAACO,KAAF,CAAQtB,IAAR,CAHE,CAAhB,CAlB6B,CAqBC;AAE5B;;AACA,MAAIuB,CAAC,GAAG1B,EAAE,CAACmB,WAAH,GACLE,KADK,CACC,CAACT,MAAD,EAAS,CAAT,CADD,CAAR;AAEA,MAAIe,KAAK,GAAGd,GAAG,CAACC,MAAJ,CAAW,GAAX,EACRC,IADQ,CACH,WADG,EACU,mBADV,CAAZ,CA1B2B,CA6B7B;;AACA,MAAIa,IAAI,GAAGN,SAAS,CAACpB,IAAD,CAApB;AAEAW,EAAAA,GAAG,CAACgB,SAAJ,CAAc,MAAd,EACG3B,IADH,CACQ0B,IADR,EAEGE,KAFH,GAGGhB,MAHH,CAGU,MAHV,EAGkB;AAHlB,GAIKC,IAJL,CAIU,GAJV,EAIe,CAJf,EAKKA,IALL,CAKU,WALV,EAKuB,UAASgB,CAAT,EAAY;AAAE,WAAO,eAAeb,CAAC,CAACa,CAAC,CAACC,EAAH,CAAhB,GAAyB,GAAzB,IAAgCN,CAAC,CAACK,CAAC,CAACE,MAAH,CAAD,GAAY,EAA5C,IAAkD,GAAzD;AAA+D,GALpG,EAMKlB,IANL,CAMU,OANV,EAMmB,UAASgB,CAAT,EAAY;AAAE,WAAOb,CAAC,CAACa,CAAC,CAACG,EAAH,CAAD,GAAUhB,CAAC,CAACa,CAAC,CAACC,EAAH,CAAX,GAAoB,CAA3B;AAAgC,GANjE,EAOKjB,IAPL,CAOU,QAPV,EAOoB,UAASgB,CAAT,EAAY;AAAE,WAAOnB,MAAM,GAAGc,CAAC,CAACK,CAAC,CAACE,MAAH,CAAjB;AAA8B,GAPhE,EAQKE,KARL,CAQW,QARX,EAQqB,SARrB,EASKA,KATL,CASW,cATX,EAS2B,KAT3B,EAUKA,KAVL,CAUW,MAVX,EAUmB,SAVnB;AAWP,CA3CD;;AA6CA,eAAelC,SAAf","sourcesContent":["// import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nconst Histogram = ({ data, nBin}) => {\n  d3.select('.vis-barchart > *').remove();\n\n  var margin = {top: 10, right: 10, bottom: 10, left: 10},\n    width = 500 - margin.left - margin.right,\n    height = 300 - margin.top - margin.bottom;\n\n  let svg = d3.select('.vis-barchart').append('svg')\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + (height+10) + \")\")\n    .call(d3.axisBottom(x));\n\n      // X axis: scale and draw:\n      var x = d3.scaleLinear()\n        .domain([0, 200])\n        .range([30, width]);\n\n        // set the parameters for the histogram\n        var histogram = d3.histogram()\n          .value(data)   // I need to give the vector of value\n          .domain(x.domain())  // then the domain of the graphic\n          .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n          // Y axis: initialization\n          var y = d3.scaleLinear()\n            .range([height, 0]);\n          var yAxis = svg.append(\"g\")\n             .attr(\"transform\", \"translate(30, 10)\")\n\n        // And apply this function to data to get the bins\n        var bins = histogram(data);\n\n        svg.selectAll(\"rect\")\n          .data(bins)\n          .enter()\n          .append(\"rect\") // Add a new rect for each new elements\n            .attr(\"x\", 1)\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + (y(d.length)+10) + \")\"; })\n            .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) - 4 ; })\n            .attr(\"height\", function(d) { return height - y(d.length); })\n            .style(\"stroke\", \"#dcd0ff\")\n            .style(\"stroke-width\", \"3px\")\n            .style(\"fill\", \"#dcd0ff\")\n}\n\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}