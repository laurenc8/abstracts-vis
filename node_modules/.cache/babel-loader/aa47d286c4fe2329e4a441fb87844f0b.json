{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Histogram(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  var margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 40\n  },\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom;\n  const ref = useD3(svg => {\n    // X axis: scale and draw:\n    var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n    var y = d3.scaleLinear().range([height, 0]);\n    var yAxis = svg.append(\"g\"); // A function that builds the graph for a specific value of bin\n\n    function update(nBin) {\n      // set the parameters for the histogram\n      var histogram = d3.histogram().value(function (d) {\n        console.log(d.price);\n        return d.price;\n      }) // I need to give the vector of value\n      .domain(x.domain()) // then the domain of the graphic\n      .thresholds(x.ticks(nBin)); // then the numbers of bins\n      // And apply this function to data to get the bins\n\n      var bins = histogram(data); // Y axis: update now that we know the domain\n\n      y.domain([0, d3.max(bins, function (d) {\n        return d.length;\n      })]); // d3.hist has to be called before the Y axis obviously\n\n      yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n      var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n      u.enter().append(\"rect\") // Add a new rect for each new elements\n      .merge(u) // get the already existing elements as well\n      .transition() // and apply changes to all of them\n      .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n      }).attr(\"width\", function (d) {\n        return x(d.x1) - x(d.x0) - 1;\n      }).attr(\"height\", function (d) {\n        return height - y(d.length);\n      }).style(\"fill\", \"#69b3a2\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n      u.exit().remove();\n    } // Initialize with 20 bins\n\n\n    update(40);\n  }, [data.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      height: 500,\n      width: \"100%\",\n      marginRight: \"0px\",\n      marginLeft: \"44px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"plot-area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"x-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Histogram, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["useD3","React","d3","Histogram","data","margin","top","right","bottom","left","width","height","ref","svg","x","scaleLinear","domain","range","append","attr","call","axisBottom","y","yAxis","update","nBin","histogram","value","d","console","log","price","thresholds","ticks","bins","max","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram({ data }) {\n  var margin = {top: 10, right: 30, bottom: 30, left: 40},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n  const ref = useD3(\n    (svg) => {\n      // X axis: scale and draw:\n    var x = d3.scaleLinear()\n    .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n    .range([0, width]);\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Y axis: initialization\n    var y = d3.scaleLinear()\n      .range([height, 0]);\n    var yAxis = svg.append(\"g\")\n\n    // A function that builds the graph for a specific value of bin\n    function update(nBin) {\n\n    // set the parameters for the histogram\n    var histogram = d3.histogram()\n        .value(function(d) { \n          console.log(d.price)\n          return d.price; })   // I need to give the vector of value\n        .domain(x.domain())  // then the domain of the graphic\n        .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n    // And apply this function to data to get the bins\n    var bins = histogram(data);\n\n    // Y axis: update now that we know the domain\n    y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n    yAxis\n      .transition()\n      .duration(1000)\n      .call(d3.axisLeft(y));\n\n    // Join the rect with the bins data\n    var u = svg.selectAll(\"rect\")\n        .data(bins)\n\n    // Manage the existing bars and eventually the new ones:\n    u\n        .enter()\n        .append(\"rect\") // Add a new rect for each new elements\n        .merge(u) // get the already existing elements as well\n        .transition() // and apply changes to all of them\n        .duration(1000)\n          .attr(\"x\", 1)\n          .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n          .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n          .attr(\"height\", function(d) { return height - y(d.length); })\n          .style(\"fill\", \"#69b3a2\")\n\n\n    // If less bar in the new histogram, I delete the ones not in use anymore\n    u\n        .exit()\n        .remove()\n\n    }\n\n\n    // Initialize with 20 bins\n    update(40)\n        },\n        [data.length]\n      );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"44px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}