{"ast":null,"code":"var _jsxFileName = \"/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Histogram(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const ref = useD3(svg => {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 40\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // get the data\n\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function (data) {\n      // X axis: scale and draw:\n      var x = d3.scaleLinear().domain([0, 1000]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n      .range([0, width]);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Y axis: initialization\n\n      var y = d3.scaleLinear().range([height, 0]);\n      var yAxis = svg.append(\"g\"); // A function that builds the graph for a specific value of bin\n\n      function update(nBin) {\n        // set the parameters for the histogram\n        var histogram = d3.histogram().value(function (d) {\n          return d.price;\n        }) // I need to give the vector of value\n        .domain(x.domain()) // then the domain of the graphic\n        .thresholds(x.ticks(nBin)); // then the numbers of bins\n        // And apply this function to data to get the bins\n\n        var bins = histogram(data); // Y axis: update now that we know the domain\n\n        y.domain([0, d3.max(bins, function (d) {\n          return d.length;\n        })]); // d3.hist has to be called before the Y axis obviously\n\n        yAxis.transition().duration(1000).call(d3.axisLeft(y)); // Join the rect with the bins data\n\n        var u = svg.selectAll(\"rect\").data(bins); // Manage the existing bars and eventually the new ones:\n\n        u.enter().append(\"rect\") // Add a new rect for each new elements\n        .merge(u) // get the already existing elements as well\n        .transition() // and apply changes to all of them\n        .duration(1000).attr(\"x\", 1).attr(\"transform\", function (d) {\n          return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n        }).attr(\"width\", function (d) {\n          return x(d.x1) - x(d.x0) - 1;\n        }).attr(\"height\", function (d) {\n          return height - y(d.length);\n        }).style(\"fill\", \"#69b3a2\"); // If less bar in the new histogram, I delete the ones not in use anymore\n\n        u.exit().remove();\n      } // Initialize with 20 bins\n\n\n      update(20); // Listen to the button -> update if user change it\n\n      d3.select(\"#nBin\").on(\"input\", function () {\n        update(+this.value);\n      });\n    });\n  }, [data.length]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      height: 500,\n      width: \"100%\",\n      marginRight: \"0px\",\n      marginLeft: \"0px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"plot-area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"x-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Histogram, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Histogram;\nexport default Histogram;\n\nvar _c;\n\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"sources":["/Users/laurenc82/Downloads/CS 271/abstracts-vis/src/components/histogram.js"],"names":["useD3","React","d3","Histogram","data","ref","svg","margin","top","right","bottom","left","width","height","select","append","attr","csv","x","scaleLinear","domain","range","call","axisBottom","y","yAxis","update","nBin","histogram","value","d","price","thresholds","ticks","bins","max","length","transition","duration","axisLeft","u","selectAll","enter","merge","x0","x1","style","exit","remove","on","marginRight","marginLeft"],"mappings":"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","sourcesContent":["import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction Histogram({ data }) {\n  const ref = useD3(\n    (svg) => {\n      // set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 40},\nwidth = 460 - margin.left - margin.right,\nheight = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n.append(\"svg\")\n.attr(\"width\", width + margin.left + margin.right)\n.attr(\"height\", height + margin.top + margin.bottom)\n.append(\"g\")\n.attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// get the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\", function(data) {\n\n// X axis: scale and draw:\nvar x = d3.scaleLinear()\n  .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })\n  .range([0, width]);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .call(d3.axisBottom(x));\n\n// Y axis: initialization\nvar y = d3.scaleLinear()\n  .range([height, 0]);\nvar yAxis = svg.append(\"g\")\n\n// A function that builds the graph for a specific value of bin\nfunction update(nBin) {\n\n// set the parameters for the histogram\nvar histogram = d3.histogram()\n    .value(function(d) { return d.price; })   // I need to give the vector of value\n    .domain(x.domain())  // then the domain of the graphic\n    .thresholds(x.ticks(nBin)); // then the numbers of bins\n\n// And apply this function to data to get the bins\nvar bins = histogram(data);\n\n// Y axis: update now that we know the domain\ny.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\nyAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisLeft(y));\n\n// Join the rect with the bins data\nvar u = svg.selectAll(\"rect\")\n    .data(bins)\n\n// Manage the existing bars and eventually the new ones:\nu\n    .enter()\n    .append(\"rect\") // Add a new rect for each new elements\n    .merge(u) // get the already existing elements as well\n    .transition() // and apply changes to all of them\n    .duration(1000)\n      .attr(\"x\", 1)\n      .attr(\"transform\", function(d) { return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\"; })\n      .attr(\"width\", function(d) { return x(d.x1) - x(d.x0) -1 ; })\n      .attr(\"height\", function(d) { return height - y(d.length); })\n      .style(\"fill\", \"#69b3a2\")\n\n\n// If less bar in the new histogram, I delete the ones not in use anymore\nu\n    .exit()\n    .remove()\n\n}\n\n\n// Initialize with 20 bins\nupdate(20)\n\n\n// Listen to the button -> update if user change it\nd3.select(\"#nBin\").on(\"input\", function() {\nupdate(+this.value);\n});\n\n});\n    },\n    [data.length]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default Histogram;"]},"metadata":{},"sourceType":"module"}